require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LinksController, :type => :controller do
  let(:user) {create(:user)}

  # This should return the minimal set of attributes required to create a valid
  # Link. As you add validations to Link, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) {
    {'url' => 'http://example.com', 'name' => 'Test'}
  }

  let(:invalid_attributes) {
    {'url' => 'invalid URL', 'name' => '#'*2000}
  }

  before do
    sign_in user
  end

  describe "GET index" do
    # it "renders home/index if User is not signed in" do
    #   sign_out user
    #   get :index
    #   expect(response).to render_template("home/index")
    # end

    it "assigns all links as @links" do
      link = create(:link, user: user)
      get :index
      expect(assigns(:links)).to eq([link])
    end
  end

  describe "GET search" do
    let(:search_response) {double}

    it "search all Links and assign the search response to @search_response" do
      expect(Link).to receive(:search).with(hash_including(user_id: user.id)) {search_response}
      allow(search_response).to receive(:per_page) {search_response}
      allow(search_response).to receive(:page) {search_response}
      get :search, query: "Test"
      expect(assigns(:search_response)).to eq search_response
    end
  end

  describe "GET show" do
    it "assigns the requested link as @link" do
      link = create(:link, user: user)
      get :show, {:id => link.to_param}
      expect(assigns(:link)).to eq(link)
    end
  end

  describe "GET new" do
    it "assigns a new link as @link" do
      get :new, {}
      expect(assigns(:link)).to be_a_new(Link)
    end
  end

  describe "GET edit" do
    it "assigns the requested link as @link" do
      link = create(:link, user: user)
      get :edit, {:id => link.to_param}
      expect(assigns(:link)).to eq(link)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Link" do
        expect {
          post :create, {:link => valid_attributes}
        }.to change(Link, :count).by(1)
      end

      it "assigns a newly created link as @link" do
        post :create, {:link => valid_attributes}
        expect(assigns(:link)).to be_a(Link)
        expect(assigns(:link)).to be_persisted
      end

      it "redirects to the created link" do
        post :create, {:link => valid_attributes}
        expect(response).to redirect_to(Link.last)
      end

      it "allows User to create a Link with existing URL" do
        page = create(:page, url: 'http://example.com')
        expect {
          post :create, {:link => valid_attributes}
        }.to change(Link, :count).by(1)
        expect {
          post :create, {:link => valid_attributes}
        }.to_not change(Link, :count)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved link as @link" do
        post :create, {:link => invalid_attributes}
        expect(assigns(:link)).to be_a_new(Link)
      end

      it "re-renders the 'new' template" do
        post :create, {:link => invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end

  describe "PUT update" do
    let(:link) {create(:link, user: user)}

    describe "with valid params" do
      let(:new_attributes) {
        {'name' => 'New Name'}
      }

      it "updates the requested link" do
        put :update, {:id => link.to_param, :link => new_attributes}
        link.reload
        expect(link.name).to eq 'New Name'
      end

      it "assigns the requested link as @link" do
        put :update, {:id => link.to_param, :link => valid_attributes}
        expect(assigns(:link)).to eq(link)
      end

      it "redirects to the link" do
        put :update, {:id => link.to_param, :link => valid_attributes}
        expect(response).to redirect_to(link)
      end
    end

    describe "with invalid params" do
      it "assigns the link as @link" do
        put :update, {:id => link.to_param, :link => invalid_attributes}
        expect(assigns(:link)).to eq(link)
      end

      it "re-renders the 'edit' template" do
        put :update, {:id => link.to_param, :link => invalid_attributes}
        expect(response).to render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested link" do
      link = create(:link, user: user)
      expect {
        delete :destroy, {:id => link.to_param}
      }.to change(Link, :count).by(-1)
    end

    it "redirects to the links list" do
      link = create(:link, user: user)
      delete :destroy, {:id => link.to_param}
      expect(response).to redirect_to(links_url)
    end
  end

  describe "GET preview" do
    it "assigns the requested link as @link" do
      link = create(:link, user: user)
      xhr :get, :preview, {:id => link.to_param}
      expect(assigns(:link)).to eq(link)
    end
  end

  describe "GET bm_save" do
    describe "with valid params" do
      it "creates a new Link" do
        expect {
          get :bm_save, valid_attributes
        }.to change(Link, :count).by(1)
      end

      it "assigns a newly created link as @link" do
        get :bm_save, valid_attributes
        expect(assigns(:link)).to be_a(Link)
        expect(assigns(:link)).to be_persisted
      end
    end

    describe "with invalid params" do
      it "assigns nil to @link" do
        get :bm_save, invalid_attributes
        expect(assigns(:link)).to be_nil
      end
    end
  end

end
